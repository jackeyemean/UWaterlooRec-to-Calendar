import React, { useState } from "react";

function App() {
  const [inputText, setInputText] = useState("");
  const [icsFileUrl, setIcsFileUrl] = useState(null);

  const handleGenerate = () => {
    const schedules = extractSchedules(inputText);

    if (schedules.length > 0) {
      const icsContent = generateICS(schedules);
      const blob = new Blob([icsContent], { type: "text/calendar" });
      const url = URL.createObjectURL(blob);
      setIcsFileUrl(url); // Set the downloadable .ics file URL
    } else {
      console.log("No valid schedule found in the input.");
      setIcsFileUrl(null);
    }
  };

  function extractSchedules(text) {
    const lines = text.split("\n");
    const schedules = [];
    const regex =
      /Schedule\s+(\w+, \w+ \d+ \d+)\s+One-Time\s+([\d:AMP -]+)\s+(.+)/;

    for (const line of lines) {
      const match = line.match(regex);
      if (match) {
        const [_, date, time, location] = match;
        if (date && time && location) {
          schedules.push({ date, time, location });
        }
      }
    }
    return schedules;
  }

  function generateICS(events) {
    let ics = `BEGIN:VCALENDAR
VERSION:2.0
CALSCALE:GREGORIAN
PRODID:-//UWaterloo Gym Scheduler//EN
`;

    events.forEach((event) => {
      const [startTime, endTime] = event.time.split(" - ");
      const formattedDate = new Date(event.date).toISOString().split("T")[0];

      const startDateTime = getDateTime(formattedDate, startTime);
      const endDateTime = getDateTime(formattedDate, endTime, startTime);

      ics += `BEGIN:VEVENT
SUMMARY:UW Rec Event
DTSTART:${startDateTime}
DTEND:${endDateTime}
LOCATION:${event.location}
DESCRIPTION:Generated by UWaterloo to Gym extension
END:VEVENT
`;
    });

    ics += "END:VCALENDAR";
    return ics;
  }

  function getDateTime(date, time, startTime = null) {
    const match = time.match(/(\d+):(\d+)\s*(AM|PM)/i);
    if (!match) {
      console.error("Invalid time format:", time);
      return `${date.replace(/-/g, "")}T000000Z`; // Default to midnight if invalid
    }

    let [_, hours, minutes, period] = match;
    hours = parseInt(hours, 10);

    if (period.toUpperCase() === "PM" && hours < 12) hours += 12;
    if (period.toUpperCase() === "AM" && hours === 12) hours = 0;

    const nextDay =
      startTime &&
      time.toUpperCase().includes("AM") &&
      startTime.toUpperCase().includes("PM");
    const finalDate = nextDay ? getNextDate(date) : date;

    return `${finalDate.replace(/-/g, "")}T${hours
      .toString()
      .padStart(2, "0")}${minutes.padStart(2, "0")}00Z`;
  }

  function getNextDate(date) {
    const d = new Date(date);
    d.setDate(d.getDate() + 1);
    return d.toISOString().split("T")[0];
  }

  return (
    <div style={{ width: "300px", padding: "10px" }}>
      <h1>UWaterlooRec to Calendar</h1>
      <textarea
        placeholder="Paste the copied schedule here..."
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
        rows="10"
        style={{
          width: "100%",
          padding: "10px", // Add padding for consistent spacing
          boxSizing: "border-box", // Ensure padding doesnâ€™t overflow the width
        }}
      />
      <button onClick={handleGenerate} style={{ marginTop: "10px" }}>
        Generate Calendar File
      </button>
      {icsFileUrl && (
        <div style={{ marginTop: "10px" }}>
          <a href={icsFileUrl} download="schedule.ics">
            Download Calendar File
          </a>
        </div>
      )}
    </div>
  );
}

export default App;
